Smart-Monitor: Linux Agent → PostgreSQL (DB on 192.168.56.11)

0) Topology (what we’re building):
    DB VM (Ubuntu): PostgreSQL already running, DB smartdb, user smart/smartpass, listening on 0.0.0.0:5432,
    pg_hba.conf allows agent subnet (e.g. 192.168.56.0/24).
    Agent VM (Linux): Runs Smart-Monitor orchestrator; pushes metrics, services, network logs, alerts → DB VM.
    If DB is on the same VM as the agent, replace the DB IP with 127.0.0.1.

1) Prereqs on the DB VM (confirm once):
    verify these fast:
        # 1) Listen on all interfaces
        grep -n "listen_addresses" /etc/postgresql/*/main/postgresql.conf
        # Expect: listen_addresses = '*'

        # 2) Allow your agent subnet + auth method (md5 or scram-sha-256)
        sudo -u postgres psql -d smartdb -c "SELECT * FROM pg_hba_file_rules;"

        # Example rows you want to see (order matters):
        # host    smartdb   smart     192.168.56.0/24   md5
        # host    all       all       192.168.56.0/24   md5

        # 3) Reload pg
        sudo systemctl reload postgresql

        # 4) Sanity: can this DB accept the smart user + pw?
        PGPASSWORD=smartpass psql -U smart -h 192.168.56.11 -d smartdb -c "select 1;"

    If password errors:
        sudo -u postgres psql -d smartdb -c "ALTER ROLE smart WITH ENCRYPTED PASSWORD 'smartpass';"
        sudo -u postgres psql -d smartdb -c "SHOW password_encryption;"    -- if md5, that's fine; just keep pg_hba at md5 too

    If timeouts:
        DB: ss -lntp | grep 5432 (listening)
        Firewall: sudo ufw status (allow 5432/tcp if needed)
        Routing from agent: see §4.

2) Prepare the Linux Agent VM
    A. Install system packages
        sudo apt-get update
        sudo apt-get install -y git python3 python3-venv python3-pip curl jq net-tools

    B. Get the code
        sudo mkdir -p /opt/smart-monitor
        sudo chown "$USER":"$USER" /opt/smart-monitor
        git clone https://github.com/anselem-okeke/Smart-Monitor.git /opt/smart-monitor

    C. Python env + deps (recommended venv)
        cd /opt/smart-monitor
        python3 -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install psutil requests "psycopg[binary]"

    D. Environment file
    Create /etc/smart-monitor/env:
        sudo tee /etc/smart-monitor/env >/dev/null <<'ENV'
        # ==== DB connection ====
        DATABASE_URL=postgresql://smart:smartpass@192.168.56.11:5432/smartdb?connect_timeout=5

        # ==== Logging / behavior ====
        PYTHONUNBUFFERED=1
        LOG_LEVEL=INFO
        DRY_RUN=false

        # Optional: constrain agent name, etc.
        # SMARTMONITOR_DB_PATH=        # leave blank for Postgres, include for SQlite
        ENV

    E. Systemd service
    Create /etc/systemd/system/smart-monitor-agent.service:
        [Unit]
        Description=Smart-Monitor Orchestrator (Linux Agent)
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        WorkingDirectory=/opt/smart-monitor
        EnvironmentFile=-/etc/smart-monitor/env
        # Use the venv python to ensure psycopg is available:
        ExecStart=/opt/smart-monitor/.venv/bin/python /opt/smart-monitor/main.py
        Restart=on-failure
        RestartSec=5

        # Optional: tighten resources / logs
        # StandardOutput=journal
        # StandardError=journal

        [Install]
        WantedBy=multi-user.target

    enable+start
        sudo systemctl daemon-reload
        sudo systemctl enable --now smart-monitor-agent
        sudo systemctl status smart-monitor-agent -n 50

3) Smoke tests from the Agent VM
    A. Raw DB reachability (psql)
        PGPASSWORD=smartpass psql -U smart -h 192.168.56.11 -d smartdb -c "select 1;"

    B. Python DB insert (same venv as service)
        cd /opt/smart-monitor
        source .venv/bin/activate
        python - <<'PY'
        import os, socket, psycopg
        os.environ.setdefault("DATABASE_URL","postgresql://smart:smartpass@192.168.56.11:5432/smartdb?connect_timeout=5")
        with psycopg.connect(os.environ["DATABASE_URL"]) as con:
            with con.cursor() as cur:
                cur.execute("INSERT INTO alerts(hostname,severity,source,message) VALUES (%s,'info','linux-sanity','hello from linux agent')",
                            (socket.gethostname(),))
                con.commit()
        print("OK")
        PY

    Check on DB:
        sudo -u postgres psql -d smartdb -c "SELECT id,hostname,severity,source,message FROM alerts ORDER BY id DESC LIMIT 3;"

4) Network routing (if you see timeouts)
    From Agent VM:
        ip a    # confirm agent IP (e.g., 192.168.56.x)
        ip r    # routing table
        ping -c2 192.168.56.11
        nc -vz 192.168.56.11 5432   # or: telnet 192.168.56.11 5432

    From DB VM:
        ss -lntp | grep 5432     # confirm listening
        sudo tcpdump -ni enp0s8 port 5432   # watch connection attempts (adjust iface)

        If TCP tries don’t reach DB VM: fix the host-only network or firewall.
        If they arrive but auth fails: fix pg_hba.conf and the user password.

5) Optional: reset DB (fresh start)
    WARNING: destructive. Stop all writers first.
        sudo systemctl stop smart-monitor smart-monitor-gui || true
        # If a Windows agent exists, stop it too.

        # Option A: drop and recreate schema (keeps DB/user)
        sudo -u postgres psql -d smartdb -f /vagrant/Smart-Monitor/db/reset_pg_schema.sql

        # Option B: drop & re-create the DB entirely
        sudo -u postgres psql -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='smartdb' AND pid <> pg_backend_pid();"
        sudo -u postgres psql -c "DROP DATABASE IF EXISTS smartdb;"
        sudo -u postgres psql -c "CREATE DATABASE smartdb OWNER smart;"
        sudo -u postgres psql -d smartdb -f /vagrant/Smart-Monitor/db/schema_pg.sql

        sudo systemctl start smart-monitor

6) Monitor & Logs
    # Agent service
    journalctl -u smart-monitor-agent -f

    # Postgres
    journalctl -u postgresql -f

    # Quick DB stats
    sudo -u postgres psql -d smartdb -c "SELECT hostname, count(*) FROM system_metrics GROUP BY hostname ORDER BY 2 DESC;"







